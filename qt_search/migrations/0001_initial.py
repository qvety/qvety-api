# Generated by Django 5.0.1 on 2024-01-20 16:05

import bitfield.models
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Distribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('tdwg_code', models.CharField(blank=True, default='', max_length=16)),
                ('tdwg_level', models.PositiveIntegerField()),
                ('species_count', models.PositiveIntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IntervalValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_value', models.PositiveIntegerField(null=True)),
                ('to_value', models.PositiveIntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PartColor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plant_part', models.PositiveSmallIntegerField(choices=[(1, 'bark'), (2, 'fruit'), (3, 'flower'), (4, 'habit'), (5, 'leaf'), (6, 'other'), (7, 'root'), (8, 'stem'), (9, 'seed'), (10, 'tuber'), (11, 'foliage')])),
                ('season', models.PositiveSmallIntegerField(choices=[(1, 'Spring'), (2, 'Summer'), (3, 'Autumn'), (4, 'Winter')])),
            ],
        ),
        migrations.CreateModel(
            name='ScientificClassification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('family', models.CharField(blank=True, default='', max_length=128)),
                ('phylum', models.CharField(blank=True, default='', max_length=128)),
                ('classify', models.CharField(blank=True, default='', max_length=128)),
                ('genus', models.CharField(blank=True, default='', max_length=128)),
                ('species', models.CharField(blank=True, default='', max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('color', models.ManyToManyField(related_name='colors_part', to='qt_search.partcolor')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=256)),
                ('scientific_classification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='qt_search.scientificclassification')),
            ],
        ),
        migrations.CreateModel(
            name='Specie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=256, unique=True)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('latin_name', models.CharField(db_index=True, max_length=256, unique=True)),
                ('genus_description', models.TextField(blank=True, default='')),
                ('duration', models.PositiveSmallIntegerField(choices=[(0, 'Annual'), (1, 'Biennial'), (2, 'Perennial')], help_text='BitFlag. How long does the plant live in time.', null=True)),
                ('edible', models.BooleanField(db_index=True, help_text='Is the species edible?', null=True)),
                ('edible_part', bitfield.models.BitField(('Bark', 'Fruit', 'Flower', 'Habit', 'Leaf', 'Other', 'Root', 'Stem', 'Seed', 'Tuber', 'Foliage'), db_index=True, default=None, help_text='BitFlag. The plant edible part(s), if any.', null=True)),
                ('rating', models.PositiveIntegerField(db_index=True, default=9999999, help_text='How popular is our plant among others in the database.')),
                ('soil_type', bitfield.models.BitField(('Clay', 'Sand', 'Chalk', 'Loam'), db_index=True, default=None, help_text='BitFlag. The type of soil in which the plant can grow.', null=True)),
                ('soil_moisture', bitfield.models.BitField(('Moist but well-drained', 'Poorly-drained', 'Well-drained'), db_index=True, default=None, help_text='BitFlag. Ground humidity level.', null=True)),
                ('soil_ph', bitfield.models.BitField(('Acid', 'Neutral', 'Alkaline'), db_index=True, default=None, help_text='BitFlag. The acidity of the soil required for the plant.', null=True)),
                ('position_sunlight', bitfield.models.BitField(('Partial shade', 'Full sun', 'Full shade'), db_index=True, default=None, help_text='BitFlag. The level of sunlight on the plant.', null=True)),
                ('position_side', bitfield.models.BitField(('East-facing', 'North-facing', 'West-facing', 'South-facing'), db_index=True, default=None, help_text='BitFlag. The side of the world where the plant can grow well.', null=True)),
                ('exposure', models.PositiveSmallIntegerField(choices=[(0, 'Exposed'), (1, 'Sheltered'), (2, 'Exposed or Sheltered'), (3, 'Sheltered or Exposed')], db_index=True, help_text='Sun-loving or not plant. The amount of light that the plant receives.', null=True)),
                ('hardiness_zone', models.CharField(blank=True, default='', max_length=4)),
                ('fragrance', bitfield.models.BitField(('Bark', 'Fruit', 'Flower', 'Habit', 'Leaf', 'Other', 'Root', 'Stem', 'Seed', 'Tuber', 'Foliage'), db_index=True, default=None, help_text='Which part of the plant emits fragrance.', null=True)),
                ('cultivation', models.TextField(blank=True, default='', help_text='cultivation tips.')),
                ('harvest', bitfield.models.BitField(('Winter', 'Spring', 'Mid autumn', 'Mid summer', 'Summer', 'Autumn', 'Late autumn', 'All year around', 'Mid spring', 'Mid winter', 'Late summer', 'Early autumn', 'Late winter', 'Early summer', 'Late spring', 'Early spring', 'Early winter'), db_index=True, default=None, help_text='BitFlag. The time at which to harvest, if any.', null=True)),
                ('planting', bitfield.models.BitField(('Winter', 'Spring', 'Mid autumn', 'Mid summer', 'Summer', 'Autumn', 'Late autumn', 'All year around', 'Mid spring', 'Mid winter', 'Late summer', 'Early autumn', 'Late winter', 'Early summer', 'Late spring', 'Early spring', 'Early winter'), db_index=True, default=None, help_text='BitFlag. The time at which to plant the plant.', null=True)),
                ('toxicity', bitfield.models.BitField(('Toxic to Cats', 'Slightly Toxic to Humans', 'Moderate Toxic to Humans', 'Highly Toxic to Humans', 'Toxic to Dogs'), db_index=True, default=None, help_text='BitFlag. The level of toxicity of the plant to humans and animals.', null=True)),
                ('foliage', bitfield.models.BitField(('Deciduous', 'Evergreen', 'Semi evergreen'), db_index=True, default=None, help_text='BitFlag. Features regarding seasonal changes in foliage.', null=True)),
                ('habit', bitfield.models.BitField(('Tufted', 'Trailing', 'Pendulous weeping', 'Clump forming', 'Columnar upright', 'Submerged', 'Suckering', 'Floating', 'Matforming', 'Bushy', 'Climbing'), db_index=True, default=None, help_text='BitFlag. The general shape and morphology of the plant, its growth method and organization of structures.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('misc', models.JSONField(blank=True, null=True)),
                ('height_cm', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='height_cm', to='qt_search.intervalvalue')),
                ('scientific_classification', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='qt_search.scientificclassification')),
                ('spread_cm', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spread_cm', to='qt_search.intervalvalue')),
                ('years_to_max_height', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='years_to_max_height', to='qt_search.intervalvalue')),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_update', models.DateTimeField()),
                ('sid', models.CharField(max_length=256)),
                ('name', models.CharField(max_length=256)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('citation', models.CharField(blank=True, default='', max_length=256)),
                ('specie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='qt_search.specie')),
            ],
        ),
        migrations.CreateModel(
            name='Pathogen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('pathogen_type', models.PositiveSmallIntegerField(choices=[(1, 'disease'), (2, 'pest')])),
                ('specie', models.ManyToManyField(related_name='pathogens', to='qt_search.specie')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='partcolor',
            name='specie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parts_color', to='qt_search.specie'),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_url', models.URLField()),
                ('image_copyright', models.CharField(max_length=512)),
                ('part', models.PositiveSmallIntegerField(choices=[(1, 'bark'), (2, 'fruit'), (3, 'flower'), (4, 'habit'), (5, 'leaf'), (6, 'other'), (7, 'root'), (8, 'stem'), (9, 'seed'), (10, 'tuber'), (11, 'foliage')], help_text='Which part of the plant is this photo?')),
                ('specie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='qt_search.specie')),
            ],
        ),
        migrations.CreateModel(
            name='GrowthTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('tip_type', models.PositiveSmallIntegerField(choices=[(1, 'propagation'), (2, 'suggested_panting_places'), (3, 'pruning')])),
                ('specie', models.ManyToManyField(related_name='growth_tips', to='qt_search.specie')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DistributionSpecie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statuses', bitfield.models.BitField(('native', 'introduced', 'doubtful', 'absent', 'extinct'), default=None, help_text='BitFlag. DistributionSpecie.', null=True)),
                ('distribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='qt_search.distribution')),
                ('specie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='distributions_specie', to='qt_search.specie')),
            ],
        ),
        migrations.AddField(
            model_name='distribution',
            name='specie',
            field=models.ManyToManyField(through='qt_search.DistributionSpecie', to='qt_search.specie'),
        ),
        migrations.CreateModel(
            name='CommonName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lang', models.CharField(max_length=8)),
                ('name', models.CharField(db_index=True, max_length=256, unique=True)),
                ('is_main', models.BooleanField(default=False, help_text='Is this the main name for the species?')),
                ('specie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='common_names', to='qt_search.specie')),
            ],
        ),
        migrations.CreateModel(
            name='Synonym',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=256, unique=True)),
                ('specie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='synonyms', to='qt_search.specie')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=256, unique=True)),
                ('specie', models.ManyToManyField(related_name='tags', to='qt_search.specie')),
            ],
        ),
        migrations.CreateModel(
            name='RegularEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('frequency_count', models.PositiveSmallIntegerField(default=1)),
                ('frequency_unit', models.PositiveSmallIntegerField(choices=[(1, 'Minute'), (2, 'Hour'), (3, 'Day'), (4, 'Week'), (5, 'Fortnight'), (6, 'Month'), (7, 'Year'), (8, 'Century')])),
                ('frequency', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='qt_search.intervalvalue')),
                ('specie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regular_events', to='qt_search.specie')),
            ],
            options={
                'unique_together': {('specie', 'name')},
            },
        ),
    ]
